generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Bank and Bank Account models
model Bank {
  id              String        @id @default(uuid())
  name            String
  code            String        @unique
  routingNumber   String?       @map("routing_number")
  swiftCode       String?       @map("swift_code")
  address         String?
  contactName     String?       @map("contact_name")
  contactPhone    String?       @map("contact_phone")
  contactEmail    String?       @map("contact_email")
  website         String?
  notes           String?
  isActive        Boolean       @default(true) @map("is_active")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  accounts        BankAccount[]

  @@map("banks")
}

enum AccountType {
  CHECKING
  SAVINGS
  CREDIT_CARD
  MONEY_MARKET
  INVESTMENT
  LOAN
  OTHER
}

enum CurrencyCode {
  USD
  EUR
  GBP
  CAD
  AUD
  JPY
  CNY
  INR
  OTHER
}

model BankAccount {
  id                String              @id @default(uuid())
  accountNumber     String              @map("account_number")
  name              String
  description       String?
  type              AccountType
  currencyCode      CurrencyCode        @default(USD) @map("currency_code")
  bankId            String              @map("bank_id")
  bank              Bank                @relation(fields: [bankId], references: [id])
  glAccountId       String?             @map("gl_account_id") // Reference to GL account
  openingBalance    Decimal             @default(0) @map("opening_balance") @db.Decimal(19, 4)
  currentBalance    Decimal             @default(0) @map("current_balance") @db.Decimal(19, 4)
  isActive          Boolean             @default(true) @map("is_active")
  lastReconciledAt  DateTime?           @map("last_reconciled_at")
  notes             String?
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")
  transactions      BankTransaction[]
  reconciliations   Reconciliation[]

  @@unique([bankId, accountNumber])
  @@map("bank_accounts")
}

model BankTransaction {
  id                String              @id @default(uuid())
  transactionDate   DateTime            @map("transaction_date")
  description       String
  reference         String?
  amount            Decimal             @db.Decimal(19, 4)
  bankAccountId     String              @map("bank_account_id")
  bankAccount       BankAccount         @relation(fields: [bankAccountId], references: [id])
  isReconciled      Boolean             @default(false) @map("is_reconciled")
  reconciledAt      DateTime?           @map("reconciled_at")
  reconciliationId  String?             @map("reconciliation_id")
  reconciliation    Reconciliation?     @relation(fields: [reconciliationId], references: [id])
  externalId        String?             @map("external_id") // For imported transactions
  notes             String?
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")

  @@map("bank_transactions")
}

model Reconciliation {
  id                String              @id @default(uuid())
  bankAccountId     String              @map("bank_account_id")
  bankAccount       BankAccount         @relation(fields: [bankAccountId], references: [id])
  startDate         DateTime            @map("start_date")
  endDate           DateTime            @map("end_date")
  startingBalance   Decimal             @map("starting_balance") @db.Decimal(19, 4)
  endingBalance     Decimal             @map("ending_balance") @db.Decimal(19, 4)
  isComplete        Boolean             @default(false) @map("is_complete")
  completedAt       DateTime?           @map("completed_at")
  notes             String?
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")
  transactions      BankTransaction[]

  @@map("reconciliations")
} 