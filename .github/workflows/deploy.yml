name: Deploy

on:
  push:
    branches: [main]
    paths-ignore:
      - '**.md'
      - '.github/dependabot.yml'

jobs:
  build:
    runs-on: ubuntu-latest
    environment:
      name: production
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build packages
        run: npm run build
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      
      # Core services
      - name: Build and push API Gateway
        uses: docker/build-push-action@v6
        with:
          context: ./services/api-gateway
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/qbit-api-gateway:latest
      
      - name: Build and push Auth Service
        uses: docker/build-push-action@v6
        with:
          context: ./services/auth
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/qbit-auth:latest
      
      # Financial services
      - name: Build and push General Ledger Service
        uses: docker/build-push-action@v6
        with:
          context: ./services/general-ledger
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/qbit-general-ledger:latest
      
      - name: Build and push Accounts Payable Service
        uses: docker/build-push-action@v6
        with:
          context: ./services/accounts-payable
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/qbit-accounts-payable:latest
      
      - name: Build and push Accounts Receivable Service
        uses: docker/build-push-action@v6
        with:
          context: ./services/accounts-receivable
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/qbit-accounts-receivable:latest
      
      - name: Build and push Banking Service
        uses: docker/build-push-action@v6
        with:
          context: ./services/banking
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/qbit-banking:latest
      
      - name: Build and push Fixed Assets Service
        uses: docker/build-push-action@v6
        with:
          context: ./services/fixed-assets
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/qbit-fixed-assets:latest
      
      - name: Build and push Inventory Service
        uses: docker/build-push-action@v6
        with:
          context: ./services/inventory
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/qbit-inventory:latest
      
      - name: Build and push Reporting Service
        uses: docker/build-push-action@v6
        with:
          context: ./services/reporting
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/qbit-reporting:latest
      
      # Frontend
      - name: Build and push Web App
        uses: docker/build-push-action@v6
        with:
          context: ./apps/web
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/qbit-web:latest

  migrate-databases:
    runs-on: ubuntu-latest
    environment:
      name: production
    needs: build
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install database migration dependencies
        run: |
          npm ci
          npm install -g prisma
        
      - name: Run database status check
        run: |
          echo "Checking database status before migrations..."
          
          # Auth service
          echo "Auth Service:"
          DATABASE_URL=${{ secrets.AUTH_DB_URL }} npx --prefix services/auth prisma migrate status

          # General Ledger
          echo "General Ledger:"
          DATABASE_URL=${{ secrets.GL_DB_URL }} npx --prefix services/general-ledger prisma migrate status
          
          # Accounts Payable
          echo "Accounts Payable:"
          DATABASE_URL=${{ secrets.AP_DB_URL }} npx --prefix services/accounts-payable prisma migrate status
          
          # Accounts Receivable
          echo "Accounts Receivable:"
          DATABASE_URL=${{ secrets.AR_DB_URL }} npx --prefix services/accounts-receivable prisma migrate status
          
          # Banking
          echo "Banking:"
          DATABASE_URL=${{ secrets.BANKING_DB_URL }} npx --prefix services/banking prisma migrate status
          
          # Fixed Assets
          echo "Fixed Assets:"
          DATABASE_URL=${{ secrets.FA_DB_URL }} npx --prefix services/fixed-assets prisma migrate status
          
          # Inventory
          echo "Inventory:"
          DATABASE_URL=${{ secrets.INVENTORY_DB_URL }} npx --prefix services/inventory prisma migrate status
          
          # Reporting
          echo "Reporting:"
          DATABASE_URL=${{ secrets.REPORTING_DB_URL }} npx --prefix services/reporting prisma migrate status
      
      - name: Run database migrations
        id: run-migrations
        run: |
          echo "Running database migrations..."
          
          # Auth service migrations
          echo "Migrating Auth Service..."
          DATABASE_URL=${{ secrets.AUTH_DB_URL }} npx --prefix services/auth prisma migrate deploy
          
          # General Ledger migrations
          echo "Migrating General Ledger..."
          DATABASE_URL=${{ secrets.GL_DB_URL }} npx --prefix services/general-ledger prisma migrate deploy
          
          # Accounts Payable migrations
          echo "Migrating Accounts Payable..."
          DATABASE_URL=${{ secrets.AP_DB_URL }} npx --prefix services/accounts-payable prisma migrate deploy
          
          # Accounts Receivable migrations
          echo "Migrating Accounts Receivable..."
          DATABASE_URL=${{ secrets.AR_DB_URL }} npx --prefix services/accounts-receivable prisma migrate deploy
          
          # Banking migrations
          echo "Migrating Banking..."
          DATABASE_URL=${{ secrets.BANKING_DB_URL }} npx --prefix services/banking prisma migrate deploy
          
          # Fixed Assets migrations
          echo "Migrating Fixed Assets..."
          DATABASE_URL=${{ secrets.FA_DB_URL }} npx --prefix services/fixed-assets prisma migrate deploy
          
          # Inventory migrations
          echo "Migrating Inventory..."
          DATABASE_URL=${{ secrets.INVENTORY_DB_URL }} npx --prefix services/inventory prisma migrate deploy
          
          # Reporting migrations
          echo "Migrating Reporting..."
          DATABASE_URL=${{ secrets.REPORTING_DB_URL }} npx --prefix services/reporting prisma migrate deploy
          
          echo "All migrations completed successfully."
      
      - name: Run database seed (only on initial setup)
        if: github.event.inputs.seed == 'true'
        run: |
          echo "Running database seeds..."
          DATABASE_URL=${{ secrets.AUTH_DB_URL }} npx --prefix services/auth prisma db seed
          echo "Seeds completed."
          
  deploy:
    runs-on: ubuntu-latest
    environment:
      name: production
    needs: migrate-databases
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
      
      - name: Configure kubectl
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG }}" > ~/.kube/config
      
      # Secrets Management
      - name: Create Kubernetes secrets
        run: |
          echo "Creating Kubernetes secrets from GitHub secrets..."
          
          # Create namespace if not exists
          kubectl create namespace qbit --dry-run=client -o yaml | kubectl apply -f -
          
          # Create PostgreSQL password secret
          kubectl create secret generic postgres-secrets \
            --from-literal=POSTGRES_PASSWORD='${{ secrets.POSTGRES_PASSWORD }}' \
            --namespace qbit \
            --dry-run=client -o yaml | kubectl apply -f -
          
          # Create API Gateway secrets
          kubectl create secret generic api-gateway-secrets \
            --from-literal=JWT_SECRET='${{ secrets.JWT_SECRET }}' \
            --from-literal=SERVICE_JWT_SECRET='${{ secrets.SERVICE_JWT_SECRET }}' \
            --from-literal=RABBITMQ_PASSWORD='${{ secrets.RABBITMQ_PASSWORD }}' \
            --namespace qbit \
            --dry-run=client -o yaml | kubectl apply -f -
            
          # Create Auth Service secrets
          kubectl create secret generic auth-service-secrets \
            --from-literal=JWT_SECRET='${{ secrets.JWT_SECRET }}' \
            --from-literal=SERVICE_JWT_SECRET='${{ secrets.SERVICE_JWT_SECRET }}' \
            --from-literal=DATABASE_PASSWORD='${{ secrets.POSTGRES_PASSWORD }}' \
            --from-literal=RABBITMQ_PASSWORD='${{ secrets.RABBITMQ_PASSWORD }}' \
            --namespace qbit \
            --dry-run=client -o yaml | kubectl apply -f -
            
          # Create General Ledger secrets
          kubectl create secret generic general-ledger-secrets \
            --from-literal=DATABASE_PASSWORD='${{ secrets.POSTGRES_PASSWORD }}' \
            --from-literal=RABBITMQ_PASSWORD='${{ secrets.RABBITMQ_PASSWORD }}' \
            --from-literal=SERVICE_JWT_SECRET='${{ secrets.SERVICE_JWT_SECRET }}' \
            --namespace qbit \
            --dry-run=client -o yaml | kubectl apply -f -
            
          # Create Accounts Payable secrets
          kubectl create secret generic accounts-payable-secrets \
            --from-literal=DATABASE_PASSWORD='${{ secrets.POSTGRES_PASSWORD }}' \
            --from-literal=RABBITMQ_PASSWORD='${{ secrets.RABBITMQ_PASSWORD }}' \
            --from-literal=SERVICE_JWT_SECRET='${{ secrets.SERVICE_JWT_SECRET }}' \
            --from-literal=JWT_SECRET='${{ secrets.JWT_SECRET }}' \
            --namespace qbit \
            --dry-run=client -o yaml | kubectl apply -f -
            
          # Create Accounts Receivable secrets
          kubectl create secret generic accounts-receivable-secrets \
            --from-literal=DATABASE_PASSWORD='${{ secrets.POSTGRES_PASSWORD }}' \
            --from-literal=RABBITMQ_PASSWORD='${{ secrets.RABBITMQ_PASSWORD }}' \
            --from-literal=SERVICE_JWT_SECRET='${{ secrets.SERVICE_JWT_SECRET }}' \
            --from-literal=JWT_SECRET='${{ secrets.JWT_SECRET }}' \
            --namespace qbit \
            --dry-run=client -o yaml | kubectl apply -f -
            
          # Create Banking secrets
          kubectl create secret generic banking-secrets \
            --from-literal=DATABASE_PASSWORD='${{ secrets.POSTGRES_PASSWORD }}' \
            --from-literal=RABBITMQ_PASSWORD='${{ secrets.RABBITMQ_PASSWORD }}' \
            --from-literal=SERVICE_JWT_SECRET='${{ secrets.SERVICE_JWT_SECRET }}' \
            --from-literal=JWT_SECRET='${{ secrets.JWT_SECRET }}' \
            --namespace qbit \
            --dry-run=client -o yaml | kubectl apply -f -
            
          # Create Fixed Assets secrets
          kubectl create secret generic fixed-assets-secrets \
            --from-literal=DATABASE_PASSWORD='${{ secrets.POSTGRES_PASSWORD }}' \
            --from-literal=RABBITMQ_PASSWORD='${{ secrets.RABBITMQ_PASSWORD }}' \
            --from-literal=SERVICE_JWT_SECRET='${{ secrets.SERVICE_JWT_SECRET }}' \
            --from-literal=JWT_SECRET='${{ secrets.JWT_SECRET }}' \
            --namespace qbit \
            --dry-run=client -o yaml | kubectl apply -f -
            
          # Create Inventory secrets
          kubectl create secret generic inventory-secrets \
            --from-literal=DATABASE_PASSWORD='${{ secrets.POSTGRES_PASSWORD }}' \
            --from-literal=RABBITMQ_PASSWORD='${{ secrets.RABBITMQ_PASSWORD }}' \
            --from-literal=SERVICE_JWT_SECRET='${{ secrets.SERVICE_JWT_SECRET }}' \
            --from-literal=JWT_SECRET='${{ secrets.JWT_SECRET }}' \
            --namespace qbit \
            --dry-run=client -o yaml | kubectl apply -f -
            
          # Create Reporting secrets
          kubectl create secret generic reporting-secrets \
            --from-literal=DATABASE_PASSWORD='${{ secrets.POSTGRES_PASSWORD }}' \
            --from-literal=RABBITMQ_PASSWORD='${{ secrets.RABBITMQ_PASSWORD }}' \
            --from-literal=SERVICE_JWT_SECRET='${{ secrets.SERVICE_JWT_SECRET }}' \
            --from-literal=JWT_SECRET='${{ secrets.JWT_SECRET }}' \
            --namespace qbit \
            --dry-run=client -o yaml | kubectl apply -f -
            
          # Create RabbitMQ secrets
          kubectl create secret generic rabbitmq-secrets \
            --from-literal=RABBITMQ_PASSWORD='${{ secrets.RABBITMQ_PASSWORD }}' \
            --namespace qbit \
            --dry-run=client -o yaml | kubectl apply -f -
            
          echo "Secrets created successfully."
      
      # Environment variable substitution for K8s manifests
      - name: Create temporary directory for processed manifests
        run: mkdir -p processed-k8s

      - name: Create substitution script
        run: |
          cat > substitute-env.sh << 'EOF'
          #!/bin/bash
          for file in k8s/*.yaml; do
            filename=$(basename $file)
            echo "Processing $file..."
            # Replace variables with actual values
            sed -e "s|\${DOCKER_REGISTRY}|${{ secrets.DOCKER_HUB_USERNAME }}|g" \
                $file > processed-k8s/$filename
          done
          EOF
          chmod +x substitute-env.sh

      - name: Run substitution on Kubernetes manifests
        run: ./substitute-env.sh
      
      # Apply K8s manifests
      - name: Deploy to Kubernetes - Core Infrastructure
        run: |
          kubectl apply -f processed-k8s/database.yaml -n qbit
          kubectl apply -f processed-k8s/redis.yaml -n qbit
          kubectl apply -f processed-k8s/rabbitmq.yaml -n qbit
          kubectl apply -f processed-k8s/consul.yaml -n qbit
      
      # Wait for infrastructure to be ready
      - name: Wait for infrastructure
        run: |
          kubectl wait --for=condition=available deployment/redis --timeout=300s -n qbit
          kubectl wait --for=condition=ready pod -l app=postgres --timeout=300s -n qbit
      
      # Apply service manifests
      - name: Deploy microservices to Kubernetes
        run: |
          kubectl apply -f processed-k8s/api-gateway.yaml -n qbit
          kubectl apply -f processed-k8s/auth-service.yaml -n qbit
          kubectl apply -f processed-k8s/general-ledger.yaml -n qbit
          kubectl apply -f processed-k8s/accounts-payable.yaml -n qbit
          kubectl apply -f processed-k8s/accounts-receivable.yaml -n qbit
          kubectl apply -f processed-k8s/banking.yaml -n qbit
          kubectl apply -f processed-k8s/fixed-assets.yaml -n qbit
          kubectl apply -f processed-k8s/inventory.yaml -n qbit
          kubectl apply -f processed-k8s/reporting.yaml -n qbit
          kubectl apply -f processed-k8s/web.yaml -n qbit
          kubectl apply -f processed-k8s/ingress.yaml -n qbit
      
      # Restart deployments for fresh images
      - name: Restart deployments
        run: |
          kubectl rollout restart deployment api-gateway auth-service-deployment general-ledger-deployment accounts-payable-deployment accounts-receivable-deployment banking-deployment fixed-assets-deployment inventory-deployment reporting-deployment web-deployment -n qbit
      
      # Post-deployment validation
      - name: Validate deployments
        run: |
          echo "Validating deployments..."
          kubectl get deployments -n qbit
          kubectl wait --for=condition=available deployment/api-gateway --timeout=300s -n qbit
          kubectl wait --for=condition=available deployment/auth-service-deployment --timeout=300s -n qbit
          echo "Core services deployed successfully!"