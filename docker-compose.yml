version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: qbit_postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: qbit_auth
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - qbit_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PgAdmin for database management (optional)
  pgadmin:
    image: dpage/pgadmin4
    container_name: qbit_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@qbit.com
      PGADMIN_DEFAULT_PASSWORD: admin123
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - qbit_network

  # Redis for caching/session management (will be used later)
  redis:
    image: redis:7-alpine
    container_name: qbit_redis
    ports:
      - "6379:6379"
    networks:
      - qbit_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  # RabbitMQ for message broker and event-driven communication
  rabbitmq:
    image: rabbitmq:3-management
    container_name: qbit_rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=qbit
      - RABBITMQ_DEFAULT_PASS=qbit_password
    ports:
      - "5672:5672"   # AMQP protocol port
      - "15672:15672" # Management UI port
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - qbit_network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  # Consul for service discovery and configuration
  consul:
    image: consul:1.15
    container_name: qbit_consul
    ports:
      - "8500:8500"   # HTTP UI
      - "8600:8600/udp" # DNS Interface
    volumes:
      - consul_data:/consul/data
    command: agent -server -ui -node=server-1 -bootstrap-expect=1 -client=0.0.0.0
    networks:
      - qbit_network
    healthcheck:
      test: ["CMD", "consul", "members"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  # API Gateway Service
  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    container_name: qbit_api_gateway
    environment:
      NODE_ENV: development
      PORT: 3000
      AUTH_SERVICE_URL: http://auth:3002
      RABBITMQ_URL: amqp://qbit:qbit_password@rabbitmq:5672
      CONSUL_HOST: consul
      CONSUL_PORT: 8500
      JAEGER_ENDPOINT: http://jaeger:14268/api/traces
      SERVICE_NAME: api-gateway
    ports:
      - "3000:3000"
    volumes:
      - ./services/api-gateway:/app
      - /app/node_modules
    depends_on:
      - auth
      - rabbitmq
      - consul
      - jaeger
    networks:
      - qbit_network
    command: yarn dev
  
  # Auth Service
  auth:
    build:
      context: ./services/auth
      dockerfile: Dockerfile
    container_name: qbit_auth
    environment:
      NODE_ENV: development
      PORT: 3002
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/qbit_auth?schema=public
      JWT_SECRET: dev-jwt-secret-key-change-in-production
      RABBITMQ_URL: amqp://qbit:qbit_password@rabbitmq:5672
      CONSUL_HOST: consul
      CONSUL_PORT: 8500
      SERVICE_NAME: auth-service
      JAEGER_ENDPOINT: http://jaeger:14268/api/traces
    ports:
      - "3002:3002"
    volumes:
      - ./services/auth:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      consul:
        condition: service_healthy
      jaeger:
        condition: service_started
    networks:
      - qbit_network
    command: yarn dev
  
  # Reporting Service
  reporting:
    build:
      context: ./services/reporting
      dockerfile: Dockerfile
    container_name: qbit_reporting
    environment:
      NODE_ENV: development
      PORT: 3004
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/qbit_reporting?schema=public
      JWT_SECRET: dev-jwt-secret-key-change-in-production
      SERVICE_JWT_SECRET: dev-service-jwt-secret-key-change-in-production
      RABBITMQ_URL: amqp://qbit:qbit_password@rabbitmq:5672
      RABBITMQ_QUEUE_NAME: reporting_queue
      RABBITMQ_EXCHANGE: reporting_exchange
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
      CONSUL_HOST: consul
      CONSUL_PORT: 8500
      SERVICE_NAME: reporting-service
      JAEGER_ENDPOINT: http://jaeger:14268/api/traces
    ports:
      - "3004:3004"
    volumes:
      - ./services/reporting:/app
      - /app/node_modules
      - /app/dist
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      consul:
        condition: service_healthy
      jaeger:
        condition: service_started
    networks:
      - qbit_network
    command: sh -c "mkdir -p /app/scripts && cp -n /scripts/* /app/scripts/ 2>/dev/null || true && chmod +x /app/scripts/*.sh && yarn start:dev"
  
  # Web App
  web:
    build:
      context: ./apps/web
      dockerfile: Dockerfile
    container_name: qbit_web
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_API_URL: http://localhost:3000
    ports:
      - "3001:3000"
    volumes:
      - ./apps/web:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - api-gateway
    networks:
      - qbit_network
    command: yarn dev

  # Elasticsearch - The core search and analytics engine
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.14.0
    container_name: qbit_elasticsearch
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
    ports:
      - "9200:9200" 
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - qbit_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Logstash - The data processing component of the ELK stack
  logstash:
    image: docker.elastic.co/logstash/logstash:7.14.0
    container_name: qbit_logstash
    environment:
      - ES_JAVA_OPTS=-Xms256m -Xmx256m
      - XPACK_MONITORING_ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    volumes:
      - ./config/logstash/pipeline:/usr/share/logstash/pipeline
    depends_on:
      - elasticsearch
    networks:
      - qbit_network
    ports:
      - "5044:5044"
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"

  # Kibana - The visualization tool for Elasticsearch data
  kibana:
    image: docker.elastic.co/kibana/kibana:7.14.0
    container_name: qbit_kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - qbit_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5601"]
      interval: 30s
      timeout: 10s
      retries: 5

  # NATS service
  nats:
    image: nats:2.10.5-alpine
    container_name: qbit-nats
    ports:
      - "4222:4222"  # Client connections
      - "8222:8222"  # HTTP monitoring port
    volumes:
      - nats-data:/data
    restart: unless-stopped
    networks:
      - qbit_network
    command: 
      - "--jetstream"  # Enable JetStream for persistent messaging
      - "--store_dir=/data"
      - "--http_port=8222"
      - "--debug=true"
      
  # Jaeger - Distributed tracing system
  jaeger:
    image: jaegertracing/all-in-one:1.46
    container_name: qbit_jaeger
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "5775:5775/udp"   # Agent accept compact thrift protocol
      - "6831:6831/udp"   # Agent accept compact thrift protocol
      - "6832:6832/udp"   # Agent accept binary thrift protocol
      - "5778:5778"       # Agent serve configs
      - "16686:16686"     # Query UI
      - "14268:14268"     # Collector HTTP accept spans
      - "14250:14250"     # Collector gRPC accept spans
      - "9411:9411"       # Collector Zipkin compatible endpoint
      - "4317:4317"       # OTLP gRPC
      - "4318:4318"       # OTLP HTTP
    networks:
      - qbit_network
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:16686"]
      interval: 30s
      timeout: 10s
      retries: 5

networks:
  qbit_network:
    driver: bridge

volumes:
  postgres_data:
  rabbitmq_data:
  consul_data:
  elasticsearch_data:
  nats-data:
    driver: local 